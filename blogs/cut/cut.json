{"article": {"title": "Mastering Text Manipulation with the Cut Command in Linux", "id": 1415560, "description": "Linux commands", "published": false, "body_markdown": "---\n\n### ***Introduction***\n\nWhen it comes to working with Linux, the command line is a powerful tool that can make your life much easier. While there are many commands available, one that is particularly useful for manipulating text data is `cut`.\n\n### ***The Power of cut***\n\nThe `cut` command is used to extract specified sections from each line of a file or input. By default, `cut` extracts every character from the beginning to the end of each line. However, it can be used to extract specific fields, columns or sections of a line based on a delimiter or a character position.\n\n### ***Examples***\n\nFor example, suppose we have a file called `data.txt` that contains the following lines of data:\n\n```bash\nJohn,Smith,25,USA\nMaria,Garcia,32,Mexico\nAhmed,Khan,45,Pakistan\n```\n\nIf we want to extract only the first names, we can use the following command:\n\n```bash\ncut -d',' -f1 data.txt\n```\n\nThis tells `cut` to use the comma `,` as the delimiter and extract only the first field of each line, which contains the first name. The output will be:\n\n```bash\nJohn\nMaria\nAhmed\n```\n\nWe can also use `cut` to extract a range of characters from each line. For example, to extract only the first three characters of each line from our `data.txt` file, we can use the following command:\n\n```bash\ncut -c1-3 data.txt\n```\n\nThis will output:\n\n```bash\nJoh\nMar\nAhm\n```\n\nAnother useful feature of `cut` is the ability to extract a specific column from a file that does not use a delimiter. For example, suppose we have a file called `numbers.txt` that contains the following data:\n\n```bash\n1234\n5678\n9101\n```\n\nTo extract the second column (i.e., the second digit of each number), we can use the following command:\n\n```bash\ncut -c2 numbers.txt\n```\n\nThis will output:\n\n```bash\n2\n6\n1\n```\n\n### ***Tips***\n\nHere are some additional tips for using the `cut` command:\n\n* To extract the last field of each line, use the `-f` option with a negative value. For example, to extract the countries from our `data.txt` file, we can use the following command:\n\n```bash\ncut -d',' -f4 -s data.txt\n```\n\nThe `-s` option tells `cut` to suppress lines that do not contain the delimiter.\n\n* To extract a range of characters from each line using a specific delimiter, use the `-d` option followed by the delimiter and the `-c` option followed by the starting and ending character positions. For example, suppose we have a file called `emails.txt` that contains the following data:\n\n```bash\njohn.smith@example.com\nmaria.garcia@example.com\nahmed.khan@example.com\n```\n\nTo extract only the domain names (i.e., the text after the `@` symbol) from each line, we can use the following command:\n\n```bash\ncut -d'@' -f2 emails.txt | cut -d'.' -f1\n```\n\nThis will output:\n\n```bash\nexample\nexample\nexample\n```\n\n### ***Conclusion***\n\nWith the `cut` command, you can quickly and easily manipulate text data in Linux. Whether you need to extract specific fields from a file, extract a range of characters from each line, or extract a specific column from a file that does not use a delimiter, `cut` is a powerful tool that can save you time and effort. So next time you're working with text data in Linux, be sure to give `cut` a try!\n\n***Thank you for reading*** \ud83e\uddd1\u200d\ud83d\udcbb\n\n***Stay tuned for more*** \ud83d\ude80\n\n\u270c\ufe0f and ***logout***\n\n<a href=\"https://www.buymeacoffee.com/k1lgor\" target=\"_blank\">\n<img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" >\n</a>", "tags": ["bash", " linux", " beginners"], "series": "Linux from A to Z", "canonical_url": null, "cover_image": null}}